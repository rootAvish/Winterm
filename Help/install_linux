#!/bin/sh

# Written by YANGYONG, 2011-10-17

# Defined Common Funcitons
echo_pause()
{
	echo "Any Key to Continue ..."
	read -n1 tmp
}
echo_exit()
{
	echo "Any Key to Exit ..."
	read -n1 tmp
	exit 11
}
echo_rootright()
{
	if [ ! `whoami` = "root" ] ; then
		echo ""
		echo "Warning:  You must run the process by 'root' user"
		echo "          Try: sudo \"$0\"					   "
		echo "Process Terminated !"
		echo ""
		exit
	fi
}
echo_platform()
{
	#Define a var: PLATFORM, value is: Ubuntu, Fedora and openSUSE
	if [ -f /etc/SuSE-release ] ; then
		PLATFORM=`grep openSUSE /etc/SuSE-release 2>&1 | awk -F ' ' '{printf $1}'`
	else
		PLATFORM=`grep Ubuntu /etc/issue 2>&1 | awk -F ' ' '{printf $1}'`
		if [ "${PLATFORM}" != "Ubuntu" ] ; then
			PLATFORM=`grep Fedora /etc/issue 2>&1 | awk -F ' ' '{printf $1}'`
		fi
	fi

	if [ "${PLATFORM}" = "grep:" ] ; then
		echo "... ERROR: Not Found Platform! 	"
	else
		echo "... Current linux release version is '$PLATFORM' "
	fi
}


#打包的安装程序目录, default is 'ztemtApp'
ZTEMTAPP_NAME="ztemtApp"
#Install file name: default is 'install'
INSTALL_FILENAME="install"
#Uninstall file name: default is 'uninstall'
UNINSTALL_FILENAME="uninstall"

#Current work path
CURRENT_PATH=`echo $0 | sed 's/\/install_linux$//'`
CURRENT_PATH_ORIGNAL="$PWD"

#Global configure file: default is '/etc/ztemt_datacard_config'
GLOBAL_CONFIG_PATH="/etc/ztemt_datacard_config"

#Dest temp direcory for copying install programs: default is '/tmp/ztemt_datacard'
TMP_DIR_PATH="/tmp/ztemt_datacard"

#Main install program files path
SYSCONFIG_NAME="sysconfig.dat"
SYSCONFIG_ISO_PATH="Linux/${SYSCONFIG_NAME}"

BINFILE_ISO_PATH="Linux/${ZTEMTAPP_NAME}.bin"
INSTALLFILE_ISO_PATH="Linux/${INSTALL_FILENAME}"
ZIPFILE_ISO_PATH="Linux/7zr"

#Real install program path
INSTALL_PATH="$TMP_DIR_PATH/Linux"
INSTALL_FILE_PATH="$TMP_DIR_PATH/Linux/$INSTALL_FILENAME"

#Data card log file: defaul is '/tmp/ztemt_datacard_logfile.txt'
LOGFILE_PATH="/tmp/ztemt_datacard_logfile.txt"




check_iso()
{
	echo "... Beginning Verify CD ... "  |  tee -a $LOGFILE_PATH
	if [ ! -f "${CURRENT_PATH}/${SYSCONFIG_ISO_PATH}" ] ; then
		echo  "ERROR: The '${CURRENT_PATH}/${SYSCONFIG_ISO_PATH}' file don't exist! "  |  tee -a $LOGFILE_PATH
		echo_exit
	fi
	if [ ! -f "${CURRENT_PATH}/${BINFILE_ISO_PATH}" ] ; then
		echo  "ERROR: The '${CURRENT_PATH}/${BINFILE_ISO_PATH}' file don't exist! "  |  tee -a $LOGFILE_PATH
		echo_exit
	fi


	if [ -d "$TMP_DIR_PATH" ] ; then
		rm -rf $TMP_DIR_PATH
	fi
	mkdir  $TMP_DIR_PATH


	if [ ! -d "$TMP_DIR_PATH" ] ; then
		echo "ERROR: Can't create the temp work path : $TMP_DIR_PATH "  |  tee -a $LOGFILE_PATH
		echo_exit
	fi

	echo "... Verify CD Succeed! "  |  tee -a $LOGFILE_PATH
}

copy_iso()
{
	echo "... Beginning Copy Install Package Files ... " 		   |  tee -a $LOGFILE_PATH
	echo "	... will take a long time, waiting 5 seconds, please"  |  tee -a $LOGFILE_PATH
	cp -Rpd "${CURRENT_PATH}/Linux"	$TMP_DIR_PATH
	chmod -R a+r+x  $TMP_DIR_PATH

	if [ -f "${TMP_DIR_PATH}/${SYSCONFIG_ISO_PATH}" ] ; then
		echo "... Copy Install Package Files Succeed! "  |  tee -a $LOGFILE_PATH
	else
		echo "ERROR: Copy Install Package Files! " 		 |  tee -a $LOGFILE_PATH
		echo_exit
	fi
}

verify_version()
{
	echo "Beginning Verify the Version of '$ZTEMTAPP_NAME' ... "  |  tee -a $LOGFILE_PATH

    #Version compare result
	VERSION_COMP_RESULT="-1"

	#Installing version and Installed version
	TARGET_VERSION=""
	TARGET_MAJOR=""
	TARGET_MINOR=""
	TARGET_BUILD=""
	CURRENT_VERSION=""
	CURRENT_MAJOR=""
	CURRENT_MINOR=""
	CURRENT_BUILD=""
	TARGET_VERSION=`grep version $TMP_DIR_PATH/$SYSCONFIG_ISO_PATH | head -n1 | cut -d = -f2 | tr -d "\015"`
	TARGET_MAJOR=`echo $TARGET_VERSION | cut -d. -f1`
	TARGET_MINOR=`echo $TARGET_VERSION | cut -d. -f2`
	TARGET_BUILD=`echo $TARGET_VERSION | cut -d. -f3`
	CURRENT_VERSION=`grep version $GLOBAL_CONFIG_PATH | head -n1 | cut -d = -f2 | tr -d "\015"`
	CURRENT_MAJOR=`echo $CURRENT_VERSION | cut -d. -f1`
	CURRENT_MINOR=`echo $CURRENT_VERSION | cut -d. -f2`
	CURRENT_BUILD=`echo $CURRENT_VERSION | cut -d. -f3`

	echo "... Installing Version is : ${TARGET_VERSION}" 	 |  tee -a $LOGFILE_PATH
	echo "... Installed  Version is : ${CURRENT_VERSION}" 	 |  tee -a $LOGFILE_PATH

	if [ -n "${CURRENT_VERSION}" ] ; then

		#Version Compare
		if [ "$TARGET_MAJOR" -gt "$CURRENT_MAJOR" ]; then
			VERSION_COMP_RESULT="1"
		elif [ "$TARGET_MAJOR" -eq "$CURRENT_MAJOR" ]; then
			if [ "$TARGET_MINOR" -gt "$CURRENT_MINOR" ]; then
		 		VERSION_COMP_RESULT="1"
			elif [ "$TARGET_MINOR" -eq "$CURRENT_MINOR" ]; then
		 	   if [ "$TARGET_BUILD" -gt "$CURRENT_BUILD" ]; then
		   			VERSION_COMP_RESULT="1"
			   elif [ "$TARGET_BUILD" -eq "$CURRENT_BUILD" ]; then
					VERSION_COMP_RESULT="0"
			   fi
			fi
		fi

	else

		#When no version info in global config file, to force install
		VERSION_COMP_RESULT="100"

	fi

}

install_init()
{
	OLD_PKG_VERSION=""

	echo_platform

	echo "... Checking 'App' process  "  |  tee -a $LOGFILE_PATH
	if [ -n "$($(which pidof) App)" ]; then
		echo "... Warning: 'App' is running, are you sure to uninstall [y/n] ? "
		read varsel
		if [ "$varsel" = "y" ]  ||   [ "$varsel" = "Y" ] ; then
			sudo killall -9 App
			echo "	... Killed 'App' process! "
		else
			echo "You canceled uninstall, exit! "
			exit
		fi
	fi

	echo "... Checking old installation "  |  tee -a $LOGFILE_PATH
	if [ "$PLATFORM" = "Ubuntu" ] ; then
		OLD_PKG_VERSION=`dpkg -s CrossPlatformUI 2>&1 |grep Version: |cut -d: -f2`
		#Version: 2.2.3
		if [  -n "$OLD_PKG_VERSION" ]; then
			echo "	... Found old installation, version is '$OLD_PKG_VERSION'     "  |  tee -a $LOGFILE_PATH
			echo "	... Are you sure to uninstall [y/n] ? "  |  tee -a $LOGFILE_PATH
			read varsel
			if [ "$varsel" = "y" ]  ||   [ "$varsel" = "Y" ] ; then
		    	sudo dpkg -P  CrossPlatformUI  >  /dev/null
			fi
		fi

	else

		OLD_PKG_VERSION=`rpm -q CrossPlatformUI | cut -de -f1`
		#CrossPlatformUI-V2.2-3.i586; package *** is not install
		if [ "$OLD_PKG_VERSION" != "packag"  ]; then
		    OLD_PKG_VERSION=`rpm -q CrossPlatformUI | cut -d- -f2 | sed 's/[ ]*//'`
			echo "	... Found old installation, version is '$OLD_PKG_VERSION'     "  |  tee -a $LOGFILE_PATH
			echo "	... Are you sure to uninstall [y/n] ? "  |  tee -a $LOGFILE_PATH
			read varsel
			if [ "$varsel" = "y" ]  ||   [ "$varsel" = "Y" ] ; then
		    	sudo rpm -e CrossPlatformUI  >  /dev/null
			fi
		fi
	fi

}

install_datacard()
{

	echo "Beginning install ... "  |  tee -a $LOGFILE_PATH
	install_init

	echo "... Installing ... "  |  tee -a $LOGFILE_PATH

	cd ${INSTALL_PATH}
	./$INSTALL_FILENAME

	echo "... Setting Global Configure File: '$GLOBAL_CONFIG_PATH'"    >>  $LOGFILE_PATH
	cp 	$TMP_DIR_PATH/$SYSCONFIG_ISO_PATH $GLOBAL_CONFIG_PATH
	echo "path=/usr/local/bin/$ZTEMTAPP_NAME"	   		>>  $GLOBAL_CONFIG_PATH
 	echo "exec=/usr/local/bin/$ZTEMTAPP_NAME/bin/App"   >>  $GLOBAL_CONFIG_PATH
	echo "uninstall=/usr/local/bin/$ZTEMTAPP_NAME/$UNINSTALL_FILENAME"  >>  $GLOBAL_CONFIG_PATH
	cat $GLOBAL_CONFIG_PATH  >>  $LOGFILE_PATH

	cd "$CURRENT_PATH"
	echo "... Removing Temporary Files ... "  >>  $LOGFILE_PATH
	rm -rf $TMP_DIR_PATH
	echo "... Current Path is : '$PWD' "  >>  $LOGFILE_PATH

	echo "Install finished! "  |  tee -a $LOGFILE_PATH

}


#Writting log file, for debugging
echo "--------------------   Installing   --------------------"	>>  $LOGFILE_PATH
date 	>>  $LOGFILE_PATH


clear
echo_rootright
#Resolevd fedora 9 question: cann't find command 'pidof'
PATH=$PATH:/sbin


cd "$CURRENT_PATH"
CURRENT_PATH=$PWD
echo "Current Path is : '$PWD' "  |  tee -a $LOGFILE_PATH


check_iso
copy_iso

if [ -e "$GLOBAL_CONFIG_PATH" ] ; then
	ZTEMTAPP_EXEC_PATH=`grep exec "${GLOBAL_CONFIG_PATH}" | awk -F '=' '{print $2}'`
	ZTEMTAPP_UNINSTALL_PATH=`grep uninstall "${GLOBAL_CONFIG_PATH}" | awk -F '=' '{print $2}'`

	if [ -f "$ZTEMTAPP_EXEC_PATH" ] ; then

		echo "... '$ZTEMTAPP_NAME' has installed ! "  |  tee -a $LOGFILE_PATH
		verify_version

		if [ "$VERSION_COMP_RESULT" -gt 0 ] ; then
			echo "... New Version, Installing ..."  |  tee -a $LOGFILE_PATH
			install_datacard
		elif [ "$VERSION_COMP_RESULT" -eq 0 ] ; then
			echo "... WARNING: the same version, Do you want to reinstall [y/n] ? "  |  tee -a $LOGFILE_PATH
			read varsel
			if [ "$varsel" = "y" ]  ||   [ "$varsel" = "Y" ] ; then
				echo "... Uninstall previous verison "  |  tee -a $LOGFILE_PATH
				if [ -f "${ZTEMTAPP_UNINSTALL_PATH}" ] ; then
					. "${ZTEMTAPP_UNINSTALL_PATH}"
				fi
				install_datacard
			else
				echo "You canceled install, exit! "  |  tee -a $LOGFILE_PATH
				echo ""
				exit
			fi
		else
			echo "... WARNING:  old version! Are you sure to install [y/n] ? "  |  tee -a $LOGFILE_PATH
			read varsel
			if [ "$varsel" = "y" ]  ||   [ "$varsel" = "Y" ] ; then
				echo "... Uninstall previous verison "  |  tee -a $LOGFILE_PATH
				if [ -f "${ZTEMTAPP_UNINSTALL_PATH}" ] ; then
					. "${ZTEMTAPP_UNINSTALL_PATH}"
				fi
				install_datacard
			else
				echo "You canceled install, exit! "	  |  tee -a $LOGFILE_PATH
				echo ""
				exit
			fi
		fi

	else
		echo "... Warning: previous version uninstall not finished, reforce to install "  |  tee -a $LOGFILE_PATH
		install_datacard
	fi

else

	echo ""
	echo "... '$ZTEMTAPP_NAME' previous version not found. and install now "  |  tee -a $LOGFILE_PATH
	install_datacard

fi


exit


